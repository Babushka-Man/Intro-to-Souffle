
/* ===== Part 1: Points ===== */

.type Point = [x: float, y: float]

.decl point(id: symbol, p: Point)
.input point

/* Relation for reference */
.decl first_quadrant(id: symbol)
first_quadrant(id) :-
    point(id, [x, y]),
    x > 0,
    y > 0.

.decl distance(id1: symbol, id2: symbol, d: float)
/* Task - Add a rule for the distance relation */
distance(id1, id2, d) :-
    point(id1, [x1, y1]),
    point(id2, [x2, y2]),
    id1 < id2,
    d = ((x1 - x2) ^ 2 + (y1 - y2) ^ 2) ^ 0.5.

.output distance(filename="./output/distance.csv")


/* ===== Part 2: Lines ===== */

/* Task - Complete the definition of the Line type */
.type Line = [p1: Point, p2: Point]

.decl line(id: symbol, l: Line)
.input line


.decl midpoint(id: symbol, p: Point)

/* Task - Add rules for the midpoint relation */
midpoint(x, p) :- line(x, [[x1, y1], [x2, y2]]), p = [x1 + (x2 - x1) / 2, y1 + (y2 - y1) / 2].

.output midpoint(filename="./output/midpoint.csv")


.decl parallel_to_axis(id: symbol)

/* Task - Add rules for the parallel_to_axis relation */
parallel_to_axis(x) :- line(x, [[x1, _], [x2, _]]), x1 = x2.
parallel_to_axis(x) :- line(x, [[_, y1], [_, y2]]), y1 = y2.

.output parallel_to_axis(filename="./output/parallel_to_axis.csv")


.decl slope(id: symbol, s: float)

/* Task - Add rules for the slope relation */
slope(x, s) :- line(x, [[x1, y1], [x2, y2]]), x1 != x2, s = (y2 - y1) / (x2 - x1).

.output slope(filename="./output/slope.csv")